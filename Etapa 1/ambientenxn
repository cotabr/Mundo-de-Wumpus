
import random
import numpy as np

size = 3 

num_pits = 2 

num_wumpus = 1 

num_treasure = 1 

# Cria a matriz preenchida com zeros
matrix = np.array([[0 for _ in range(size)] for _ in range(size)])

# Define a posição aleatória dos buracos
for _ in range(num_pits):
    row, col = random.randrange(size), random.randrange(size)
    matrix[row][col] = -1  # -1 representa um buraco

# Define a posição aleatória do Wumpus
while True:
    row, col = random.randrange(size), random.randrange(size)
    if matrix[row][col] != -1:
        matrix[row][col] = -2  # -2 representa o Wumpus
        break

# Define a posição aleatória do tesouro
while True:
    row, col = random.randrange(size), random.randrange(size)
    if matrix[row][col] not in [-1, -2]:
        matrix[row][col] = 1  # 1 representa o tesouro
        break

# Define a posição inicial do agente
agent_pos = (size-1, 0)

def get_perceptions(agent_pos, matrix):
    perceptions = []
    row, col = agent_pos
    size = matrix.shape[0]
    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]  # esquerda, direita, acima, abaixo
    
    for dx, dy in directions:
        new_row, new_col = row + dx, col + dy
        
        if 0 <= new_row < size and 0 <= new_col < size:
            if matrix[new_row][new_col] == -1:  # Verifica se há um buraco
                perceptions.append("brisa")
            elif matrix[new_row][new_col] == -2:  # Verifica se há o Wumpus
                perceptions.append("fedor")
            elif matrix[new_row][new_col] == 1:  # Verifica se há o tesouro
                perceptions.append("brilho")
        else:
            perceptions.append("parede")  # Adiciona a percepção de parede quando fora dos limites do tabuleiro
    
    if matrix[row][col] in [-1, -2]:  # Verifica se há buraco ou Wumpus na posição atual
        perceptions.append("impacto")
    
    return perceptions

matrix[agent_pos[0]][agent_pos[1]] = 2 # 2 representa o agente
perceptions = get_perceptions(agent_pos, matrix)

print(perceptions)

print(matrix)

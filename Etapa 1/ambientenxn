import random
import numpy as np

size = 3 

num_pits = 2 

num_wumpus = 1 

num_treasure = 1 

# Cria a matriz preenchida com zeros
matrix = np.array([[0 for _ in range(size)] for _ in range(size)])

# Define a posição aleatória dos buracos
for _ in range(num_pits):
    row, col = random.randrange(size), random.randrange(size)
    matrix[row][col] = -1  # -1 representa um buraco

# Define a posição aleatória do Wumpus
while True:
    row, col = random.randrange(size), random.randrange(size)
    if matrix[row][col] != -1:
        matrix[row][col] = -2  # -2 representa o Wumpus
        break

# Define a posição aleatória do tesouro
while True:
    row, col = random.randrange(size), random.randrange(size)
    if matrix[row][col] not in [-1, -2]:
        matrix[row][col] = 1  # 1 representa o tesouro
        break

# Define a posição inicial do agente
agent_pos = (size-1, 0)

def get_perceptions(agent_pos, matrix):
    perceptions = []
    row, col = agent_pos
    size = matrix.shape[0]
    
    # Percepção de brisa
    if row > 0 and matrix[row-1][col] == -1:  # Verifica se há um buraco acima
        perceptions.append("brisa")
    if row < size-1 and matrix[row+1][col] == -1:  # Verifica se há um buraco abaixo
        perceptions.append("brisa")
    if col > 0 and matrix[row][col-1] == -1:  # Verifica se há um buraco à esquerda
        perceptions.append("brisa")
    if col < size-1 and matrix[row][col+1] == -1:  # Verifica se há um buraco à direita
        perceptions.append("brisa")
    
    # Percepção de fedor
    if row > 0 and matrix[row-1][col] == -2:  # Verifica se há o Wumpus acima
        perceptions.append("fedor")
    if row < size-1 and matrix[row+1][col] == -2:  # Verifica se há o Wumpus abaixo
        perceptions.append("fedor")
    if col > 0 and matrix[row][col-1] == -2:  # Verifica se há o Wumpus à esquerda
        perceptions.append("fedor")
    if col < size-1 and matrix[row][col+1] == -2:  # Verifica se há o Wumpus à direita
        perceptions.append("fedor")
    
    # Percepção de brilho
    if matrix[row][col] == 1:  # Verifica se há o tesouro na posição atual
        perceptions.append("brilho")
    
    # Percepção de impacto
    if matrix[row][col] == -1 or matrix[row][col] == -2:  # Verifica se há buraco ou Wumpus na posição atual
        perceptions.append("impacto")
    
    return perceptions

matrix[agent_pos[0]][agent_pos[1]] = 2 # 2 representa o agente
perceptions = get_perceptions(agent_pos, matrix)
print(perceptions)

matrix[agent_pos[0]][agent_pos[1]] = 2 # 2 representa o agente
print(matrix)
